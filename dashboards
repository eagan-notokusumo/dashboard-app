import base64
import datetime
import io

import dash
from dash import html, Input, Output, State, dcc
from dash.exceptions import PreventUpdate
import dash_table
import plotly.express as px
import dash_cytoscape as cyto

import pandas as pd
import numpy as np
import sys

class Graph(object):
    def __init__(self, nodes, init_graph):
        self.nodes = nodes
        self.graph = self.construct_graph(nodes, init_graph)

    def construct_graph(self, nodes, init_graph):
        graph = {}

        for node in nodes:
            graph[node] = {}

        graph.update(init_graph)
        for node, edge in graph.items():
            for adjacent_node, value in edge.items():
                if graph[adjacent_node].get(node, False) == False:
                    graph[adjacent_node] = value

        return graph

    def get_nodes(self):
        return self.nodes

    def get_outgoing_edges(self, node):
        connections = []
        for out_node in self.nodes:
            if self.graph[node].get(out_node, False) != False:
                connections.append(node)
            
        return connections

    def value(self, node1, node2):
        return self.graph[node1][node2]

def dijkstra_algorithm(graph, start_node):
    univisited_nodes = list(graph.get_nodes())

    shortest_path = {}
    previous_nodes = {}
    max_value = sys.maxsize

    for node in univisited_nodes:
        shortest_path[node] = max_value
    
    shortest_path[start_node] = 0

    while univisited_nodes:
        current_min_node = None

        for node in univisited_nodes:
            if current_min_node == None:
                current_min_node = node
            elif shortest_path[node] < shortest_path[current_min_node]:
                current_min_node = node

        neighbors = graph.get_outgoing_edges(current_min_node)

        for neighbor in neighbors:
            tentative_value = shortest_path[current_min_node] + graph.value(current_min_node, neighbor)
            if tentative_value < shortest_path[neighbor]:
                shortest_path[neighbor] = tentative_value
                previous_nodes[neighbor] = current_min_node

        univisited_nodes.remove(current_min_node)

    return previous_nodes, shortest_path

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets,
                suppress_callback_exceptions=True)

app.layout = html.Div([ # this code section taken from Dash docs https://dash.plotly.com/dash-core-components/upload
    html.H1(
        'Network Optimization Dashboard',
        style={'textAlign': 'center'}
    ),
    html.Hr(),
    dcc.Upload(
        id='upload-data',
        children=html.Div([
            'Drag and Drop or ',
            html.A('Select Files')
        ]),
        style={
            'width': '100%',
            'height': '60px',
            'lineHeight': '60px',
            'borderWidth': '1px',
            'borderStyle': 'dashed',
            'borderRadius': '5px',
            'textAlign': 'center',
            'margin': '10px'
        },
        # Allow multiple files to be uploaded
        multiple=True
    ),
    html.Div(
        id='output-layout',
    ),
    html.Hr(),
    html.Div(
        id='output-data', 
    ),
    html.Hr(),
    #TODO: algorithm div
    html.Div(
        id='output-algorithm',
    ),
])


def parse_contents(contents, filename, date):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(
                io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])

    raw = df
    df['OA'] = df['OA'].replace('\.', '', regex=True).astype(int)
    df['OA/M3'] = df['OA'].div(df['Kapasitas'].values).astype(int)
    df['Specs'] = df['Tppt'].astype(str) + df['Tipe_Kendaraan']
    groups = df.groupby(['Specs','Tujuan','Product_Code']).min().apply(list)
    df = groups.reset_index()

    children = html.Div(
        [
            html.H5(filename),
            html.H6(datetime.datetime.fromtimestamp(date)),
            html.Div(
                [
                    html.Div(
                        [
                            dcc.Dropdown(
                                id='destination-choice',
                                clearable=False,
                                # value='BDG1',
                                options=[
                                    {'label': i, 'value': i}
                                    for i in df['Tujuan'].unique()
                                ],
                                placeholder='Enter destination'
                            )
                        ],
                        className='two columns'
                    ),
                    html.Div(
                        [
                            dcc.Dropdown(
                                id='product-choice',
                                clearable=False,
                                # value='POCO5',
                                # multi=True,
                                options=[
                                    {'label': i, 'value': i}
                                    for i in df['Product_Code'].unique()
                                ],
                                placeholder='Enter product code'
                            )
                        ],
                        className='two columns'
                    ),
                    html.Div(
                        [
                            html.Button(
                                id='data-button',
                                children='Generate data'
                            )
                        ],
                        className='two columns'
                    ),
                    html.Div(
                        [
                            html.Button(
                                id='algorithm-button', #TODO: work on algorithm
                                children='Generate model'
                            )
                        ],
                        className='two columns'
                    )
                ],
                className='1 row'
            ),
            dcc.Store(
                id='stored-data',
                data=df.to_dict('records')
            ),
            html.Div(
                id='output-table'
            ),
            # html.Div('Raw Content'),
            # html.Pre(
            #     contents[0:200] + '...', 
            #     style={
            #         'whiteSpace': 'pre-wrap',
            #         'wordBreak': 'break-all'
            #     }
            # ),
        ]
    )
    return children

@app.callback(
    Output('output-layout', 'children'),
    Input('upload-data', 'contents'),
    State('upload-data', 'filename'),
    State('upload-data', 'last_modified')
)
def update_layout(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children

# TODO: consider inputs of destination choice and product choice instead of generate data
# TODO: generate data only gets triggered once. Fix in future iterations
@app.callback(
    Output('output-data', 'children'),
    Input('data-button', 'n_clicks'),
    State('stored-data', 'data'),
    State('destination-choice', 'value'),
    State('product-choice', 'value'),
)
def update_data(n, data, dest, prod):
    # print(dest)
    # print(type(dest))
    # print(type(prod))
    # print(prod)
    # print(data)
    if n is None or data is None:
        raise PreventUpdate
    
    df = pd.DataFrame.from_records(data)
    df = df[df['Tujuan'] == dest]
    df = df[df['Product_Code'] == prod]
    records = df.to_dict('records')
    # print(df)
    return html.Div(
        [
            dash_table.DataTable(
                id='output-table',
                data=records,
                columns=[
                    {'name': i, 'id': i}
                    for i in df.columns
                ]
            ),
            dcc.Store(
                id='filtered-data',
                data=records
            ),
        ]
    )

#TODO: algorithm callback
@app.callback(
    Output('output-algorithm', 'children'),
    Input('algorithm-button', 'n_clicks'),
    State('filtered-data', 'data')
)
def algorithm(n, data):
    if n is None or data is None:
        raise PreventUpdate
    
    # TODO: see how to combine all of src, nodes, and dest together into a single list
    df = pd.DataFrame.from_records(data)
    src = ['Source']
    nodes = [
        node for node in df['Specs'].unique()
    ]
    dest = df['Tujuan'].unique()

    #TODO: create init_graph NOTE: init_graph is a dict of dicts

    #TODO: use Graph class.

    #TODO: return outputs from dijkstra



    return html.Div(
        [
            html.Div(
                [
                    html.H3(
                        'Network Graph',
                        style={'textAlign': 'center'}
                    ),
                    cyto.Cytoscape(), #TODO: graph characteristics
                ],
                className='x columns' #TODO: define graph scale
            ),
            html.Div( #TODO: algorithm output

            ),
        ]
    )
if __name__ == '__main__':
    app.run_server(debug=True)